import React, {Component} from 'react';
import AppStyles from './App.module.css';
import Cockpit from '../../components/Cockpit/Cockpit';
import SignInContext from '../../context/sign-in-context';
import WithClass from '../../high-order-components/WithClass';
import PersonList from '../../components/Person/PersonList/PersonList';

class App extends Component {
  constructor(props) {
    super(props);
    
    console.log('[App.js] constructor');

    this.state = {
      persons: [
        {id: 'puppy', name: 'Luis', age: 21},
        {id: 'kitty', name: 'Gabriela', age: 22}
      ], otherState: 'Other value', showPersons: false,
      showCockpit: true, counter: 0, signedIn: false
    };
  };

  static getDerivedStateFromProps(props, state) {
    console.log('[App.js] getDerivedStateFromProps', props);

    return state;
  };

  nameChangedHandler = (event, id) => {
    const index = this.state.persons.findIndex(person => {
      return person.id === id;
  });

    const person = {...this.state.persons[index]};
    const persons = [...this.state.persons];
    person.name = event.target.value;
    persons[index] = person;

    this.setState({persons: persons});

    /**
     * This is the correct way of updating the state of a property
     *  when depends on old or previous state
     */
    this.setState((prevState, props) => {
      return {
        counter: prevState.counter + 1
      };
    });
  };

  togglePersonHandler = () => {
    const show = this.state.showPersons;

    this.setState({showPersons: !show});
  };

  toggleCockpitHandler = () => {
    const show =  this.state.showCockpit;

    this.setState({showCockpit: !show});
  };

  deletePersonHandler = index => {
    // Copying the array and not getting a reference to the array
    const persons = [...this.state.persons];

    persons.splice(index, 1);
    this.setState({persons: persons});
  };

  signInHandler = () => {
    this.setState({
      signedIn: true
    })
  };

  // JSX
  render() {
    console.log('[App.js] render');

    let persons = null;

    if(this.state.showPersons) {
      persons = <PersonList persons={this.state.persons} 
        clickEvent={this.deletePersonHandler} changeEvent={this.nameChangedHandler}/>;
    }

    return(
      <WithClass classAttr={AppStyles.App}>
        <button onClick={this.toggleCockpitHandler}>Show cockpit</button>
        {/* Provider gives a provider JSX component on this SignInContext object
        and you wrap everything where you want to be able to access to this context.*/}
        <SignInContext.Provider 
          value={{signedIn: this.state.signedIn, signIn: this.signInHandler}}>
          {
            this.state.showCockpit ? 
              <Cockpit title={this.props.appTitle} 
                personsLength={this.state.persons.length}
                showPersons={this.state.showPersons} 
                clickEvent={this.togglePersonHandler}/> : null
          }
          {persons}
        </SignInContext.Provider>
      </WithClass>
    );
  };

  componentDidMount() {
    console.log('[App.js] componentDidMount');
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log('[App.js] shouldComponentUpdate');
    return true;
  }

  getSnapshotBeforeUpdate(prevProps, prevState) {
    console.log('[PersonList.js] getSnapshotBeforeUpdate');

    return {message: 'Snapshot!'};
  }


  componentDidUpdate(prevProps, prevState, snapshot) {
    console.log('[App.js] componentDidUpdate', snapshot);
  } 

// This is the actual code generated by the JSX syntax from above when is compiled:
//   return (
//     React.createElement('div', {className: "App"}, 
//     React.createElement('h1', null, 'Hi, I\'m a React App!'))
//   );
}

export default App;
//export default withClass(App, AppStyles.App);

// React hooks, functional component with state
/* const App = props => {
  const [personState, setPersonState] = useState({
    persons: [
      {name: 'Luis', age: '21'},
      {name: 'Gabriela', age: '22'}
    ]//,
    //otherState: 'Othe value'
  });

  const [otherState, setOtherState] = useState({
    otherState: 'Other value'
  });

  const switchNameHandler = () => {
  // Replaces the previous state for the new one meaning that all properties 
  // wanted to be maintained from the old state, need to be manually written again
    setPersonState({
      persons: [
        {name: 'Pipo', age: '21'},
        {name: 'Gaby', age: '22'}
      ]
    });

    // So we rather create multiple useState to preserve each individually
    setOtherState({
      otherState: otherState.otherState
    });
  };

  return(
    <div className="App">
      <h1>Hi, I'm a React App!</h1>
      <Person name={personState.persons[0].name} age={personState.persons[0].age}>
        Hobbies: Playing videogames
      </Person>
      <Person name={personState.persons[1].name} age={personState.persons[1].age}>
        Hobbies: Sewing
      </Person>
      <button onClick={switchNameHandler}>Switch Name</button>
    </div>
  );
}*/