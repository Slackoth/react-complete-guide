import './App.css';
import React, {Component/*, useState*/} from 'react';
import Person from './Person/Person';

class App extends Component {
  state = {
    persons: [
      {id: 'puppy', name: 'Luis', age: '21'},
      {id: 'kitty', name: 'Gabriela', age: '22'}
    ],
    otherState: 'Other value',
    showPersons: false
  };

  // switchNameHandler = (boyName) => {
  //   // DON'T DO THIS: this.state.persons[0].name = 'Luis Manuel';

  //   // Merges the old state with the new state
  //   this.setState({
  //     persons: [
  //       {name: boyName, age: '21'},
  //       {name: 'Gaby', age: '22'}
  //     ]
  //   });
  // };

  nameChangedHandler = (event, id) => {
    const index = this.state.persons.findIndex(person => {
      return person.id === id;
    });

    const person = {...this.state.persons[index]};
    const persons = [...this.state.persons];
    person.name = event.target.value;
    persons[index] = person;

    this.setState({persons: persons});
  };

  togglePersonHandler = () => {
    const show = this.state.showPersons;

    this.setState({showPersons: !show});
  };

  deletePersonHandler = index => {
    // Copying the array and not getting a reference to the array
    const persons = [...this.state.persons];

    persons.splice(index, 1);
    this.setState({persons: persons});
  };

  // JSX
  render() {
    const style = {
      backgroundColor: '#ffffff',
      font: 'inherit',
      border: '1px solid blue',
      padding: '8px',
      cursor: 'pointer'
    };

    let persons = null;

    if(this.state.showPersons) {
      persons = this.state.persons.map((person, index) => {
        return (
          <Person key={person.id} name={person.name} age={person.age}
            clickEvent={this.deletePersonHandler.bind(this, index)}
            changeEvent={event => this.nameChangedHandler(event, person.id)}/>
        );
      });
    }

    return(
      <div className="App">
        <h1>Hi, I'm a React App!</h1>
        {persons}
        {/* Way #1 to pass arguments: "this" controls what "this" will refer to
        and by binding it to "this" here outside of the function, we're binding 
        it to the class. this.switchNameHandler.bind(this, 'Pipo')*/}
        <button 
          onClick={this.togglePersonHandler}
          style={style}>
            Show Persons
        </button>
      </div>
    );
  };

  /* 
  This is the actual code generated by the JSX syntax from above when is compiled:
    return (
      React.createElement('div', {className: "App"}, 
      React.createElement('h1', null, 'Hi, I\'m a React App!'))
    );
  */
}

export default App;

// React hooks, functional component with state
/* const App = props => {
  const [personState, setPersonState] = useState({
    persons: [
      {name: 'Luis', age: '21'},
      {name: 'Gabriela', age: '22'}
    ]//,
    //otherState: 'Othe value'
  });

  const [otherState, setOtherState] = useState({
    otherState: 'Other value'
  });

  const switchNameHandler = () => {
  // Replaces the previous state for the new one meaning that all properties 
  // wanted to be maintained from the old state, need to be manually written again
    setPersonState({
      persons: [
        {name: 'Pipo', age: '21'},
        {name: 'Gaby', age: '22'}
      ]
    });

    // So we rather create multiple useState to preserve each individually
    setOtherState({
      otherState: otherState.otherState
    });
  };

  return(
    <div className="App">
      <h1>Hi, I'm a React App!</h1>
      <Person name={personState.persons[0].name} age={personState.persons[0].age}>
        Hobbies: Playing videogames
      </Person>
      <Person name={personState.persons[1].name} age={personState.persons[1].age}>
        Hobbies: Sewing
      </Person>
      <button onClick={switchNameHandler}>Switch Name</button>
    </div>
  );
}*/