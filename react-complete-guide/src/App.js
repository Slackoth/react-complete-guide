import './App.css';
import React, {Component, useState} from 'react';
import Person from './Person/Person';

class App extends Component {
  state = {
    persons: [
      {name: 'Luis', age: '21'},
      {name: 'Gabriela', age: '22'}
    ],
    otherState: 'Other value'
  };

  switchNameHandler = (boyName) => {
    // DON'T DO THIS: this.state.persons[0].name = 'Luis Manuel';

    // Merges the old state with the new state
    this.setState({
      persons: [
        {name: boyName, age: '21'},
        {name: 'Gaby', age: '22'}
      ]
    });
  };

  nameChangedHandler = event => {
    this.setState({
      persons: [
        {name: event.target.value, age: '21'},
        {name: 'Gaby', age: '22'}
      ]
    });
  };

  // JSX
  render() {
    const style = {
      backgroundColor: '#ffffff',
      font: 'inherit',
      border: '1px solid blue',
      padding: '8px',
      cursor: 'pointer'
    };

    return(
      <div className="App">
        <h1>Hi, I'm a React App!</h1>
        <Person 
          name={this.state.persons[0].name} 
          age={this.state.persons[0].age}
          // BEFORE: clickEvent={this.switchNameHandler}
          // Way #2 to pass arguments: Not really recommended 
          clickEvent={() => this.switchNameHandler('Pippo')}
          changeEvent={this.nameChangedHandler}>
            Hobbies: Playing videogames
        </Person>
        <Person 
          name={this.state.persons[1].name} 
          age={this.state.persons[1].age}>
            Hobbies: Sewing
        </Person>
        {/* Way #1 to pass arguments: "this" controls what "this" will refer to
        and by binding it to "this" here outside of the function, we're binding it to the
        class. */}
        <button 
          onClick={this.switchNameHandler.bind(this, 'Pipo')}
          style={style}>
            Switch Name
        </button>
      </div>
    );
  };

  /* 
  This is the actual code generated by the JSX syntax from above when is compiled:
    return (
      React.createElement('div', {className: "App"}, 
      React.createElement('h1', null, 'Hi, I\'m a React App!'))
    );
  */
}

export default App;

// React hooks, functional component with state
/* const App = props => {
  const [personState, setPersonState] = useState({
    persons: [
      {name: 'Luis', age: '21'},
      {name: 'Gabriela', age: '22'}
    ]//,
    //otherState: 'Othe value'
  });

  const [otherState, setOtherState] = useState({
    otherState: 'Other value'
  });

  const switchNameHandler = () => {
  // Replaces the previous state for the new one meaning that all properties 
  // wanted to be maintained from the old state, need to be manually written again
    setPersonState({
      persons: [
        {name: 'Pipo', age: '21'},
        {name: 'Gaby', age: '22'}
      ]
    });

    // So we rather create multiple useState to preserve each individually
    setOtherState({
      otherState: otherState.otherState
    });
  };

  return(
    <div className="App">
      <h1>Hi, I'm a React App!</h1>
      <Person name={personState.persons[0].name} age={personState.persons[0].age}>
        Hobbies: Playing videogames
      </Person>
      <Person name={personState.persons[1].name} age={personState.persons[1].age}>
        Hobbies: Sewing
      </Person>
      <button onClick={switchNameHandler}>Switch Name</button>
    </div>
  );
}*/